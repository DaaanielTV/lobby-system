plugins {
    id 'java'
    id("io.freefair.lombok") version "8.6"
    id("io.papermc.paperweight.userdev") version "1.7.1"
    // Check for new versions at https://plugins.gradle.org/plugin/io.papermc.paperweight.userdev

    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "com.diffplug.spotless" version "6.20.0"
}

group = 'de.spookly'
version = project.plugin_version

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
}

allprojects {
    apply plugin: "com.diffplug.spotless"
    apply plugin: "io.papermc.paperweight.userdev"
    apply plugin: 'java'

    repositories {
        maven {
            name = "spooklyRepositoryReleases"
            url = "https://mvn.spookly.net/releases"
        }
        maven {
            name = "spooklyRepositorySnapshots"
            url = "https://mvn.spookly.net/snapshots"
        }
    }

    dependencies {
        //External API's
        compileOnly 'org.jetbrains:annotations:' + project.jetbrains_annotations
        compileOnly 'org.projectlombok:lombok:' + project.lombok_version
        annotationProcessor 'org.projectlombok:lombok:' + project.lombok_version

        //Cloudnet
        compileOnly 'eu.cloudnetservice.cloudnet:driver:' + project.cloudnet_version
        compileOnly 'eu.cloudnetservice.cloudnet:bridge:' + project.cloudnet_version

        //Internal API's
        compileOnly "de.nehlen:Spookly-Core-API:" + project.core_version
        compileOnly "de.nehlen:SpooklyCloudNetUtils:" + project.cloud_utils_version
        compileOnly "de.spookly:cosmetics-api:1.0-SNAPSHOT"
        compileOnly "de.spookly:Cosmetics:1.0-SNAPSHOT"

        //nms
        paperweight.paperDevBundle(project.paper_version)
    }

    spotless {
        java {
//            licenseHeaderFile(rootProject.file("HEADER"))
            removeUnusedImports()
            importOrder('java', 'javax', '', 'de.spookly', 'net.minecraft', 'org.bukkit')
            indentWithTabs()
            trimTrailingWhitespace()
        }
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}